--- Quarta Etapa: Funções e Triggers ---

-- JOÃO VITOR
#1) Trigger
  /* verifica se existe avaliaçõe à alguma música que vai ser excluída
  Se tiver pelo menos uma avaliação, o trigger gera erro, impedindo a exclusão*/
  delimiter //
  create trigger impede_exclusao_musica_avaliada
  before delete on musica
  for each row
  begin
      declare quantidade_avaliacoes int;

      select count(*) into quantidade_avaliacoes
      from hist_avaliacao
      where cod_musica = old.cod_musica;

      if quantidade_avaliacoes > 0 then
          signal sqlstate '45000'
          set message_text = 'Erro: Não é possível excluir uma música que foi avaliada.';
      end if;
  end;
  //
  delimiter ;

  #Exemplo
  -- tentativa excluindo uma música que foi avaliada
  delete from musica where cod_musica = 3;

#2) Função
  /* curto se a duração for menor ou igual a 180 minutos e longo se for o contrário */ 
  delimiter //
  create function tempo_reproducao_classificacao(tempo time) returns varchar(10)
  begin
      declare duracao_minutos int;

      set duracao_minutos = time_to_sec(tempo) / 60;

      if duracao_minutos <= 180 then
          return 'Curto';
      else
          return 'Longo';
      end if;
  end;
  //
  delimiter ;

  #Exemplo
  select tempo_reproducao_classificacao('01:30:00') as classificacao;
  -- esse é curto

  select tempo_reproducao_classificacao('05:30:00') as classificacao;
  -- esse é longo


-- PAULO
-- #1) Trigger
  
  delimiter //
  create trigger barra_ano before insert on album
  for each row
  begin
  if( new.ano_lancamento < current_date()) then
    signal sqlstate '45000' set message_text = 'Impossível postar nessa data';
  end if;
  end //

  delimiter ;

  insert into album (cod_album, titulo_album, ano_lancamento, genero_musical) values 
  (20, 'Pink', '1700-12-15', 'Rap');


-- #2) Função
  delimiter //
  create function quantos_anos_tem(ano_lancamento date) returns int
  begin
  declare qtd_anos int;
  set qtd_anos = timestampdiff(year, ano_lancamento, current_date());
  return qtd_anos;
  end //
  delimiter ;


delimiter //
create function classification(qtd_anos int) returns varchar(30)
begin
case 
when qtd_anos <= 5 then
return 'Novo';
when qtd_anos > 5 and qtd_anos <= 10 then
return 'Jovem';
when qtd_anos > 10 and qtd_anos <= 30 then
return 'Antigo';
when qtd_anos > 30 then
return 'Muito Antigo';
end case;
end //
delimiter ;


select titulo_album, quantos_anos_tem(ano_lancamento) idade, classification(quantos_anos_tem(ano_lancamento)) classificacao
from album;


-- ClAITO
-- #1) Trigger
delimiter //
create trigger validacao before insert on usuario 
for each row
begin
  if new.nome_usuario is null or new.email is null or new.senha is null or new.dt_nasc is null then 
    signal sqlstate '45000'
    set message_text = 'Erro: todos os campos obrigatórios devem ser preeenchidos de maneira adequada!';
    end if;
end //
delimiter ;

drop trigger validacao;
insert into usuario values (13, 'Jorge','jj@gmail.com', '1000000', 'M','2006-11-16');
select * from usuario;

-- #2) Função
delimiter //
create function redefinir_senha (f_cod_usuario int, f_senha varchar (50)) returns boolean
begin    
  declare deuCerto boolean default false;

  if exists (select * from usuario where cod_usuario = f_cod_usuario) then 
    update usuario set senha = f_senha where cod_usuario = f_cod_usuario;
    set deuCerto = true;
    end if;

    return deuCerto;
end //
delimiter ;

select redefinir_senha (1, 'abcd');

select * from usuario;

-- EMILY
-- #1) Trigger
-- Trigger
drop trigger atualizar_nro_seguidores;
-- Criação de um trigger que atualiza o número de seguidores do cantor após cada avaliação
DELIMITER $
CREATE TRIGGER atualizar_nro_seguidores
AFTER INSERT ON hist_avaliacao
FOR EACH ROW
BEGIN
    DECLARE avg_rating FLOAT;

    -- Calcula a média das notas para o artista associado à música avaliada
      SELECT avg (ma.cod_musica) INTO @avg_rating
    FROM hist_avaliacao ha, musica_artista ma
    WHERE ha.cod_musica = ma.cod_musica AND ma.cod_artista
IN (SELECT cod_artista FROM musica_artista WHERE cod_musica= new.cod_musica )
;

    -- Atualiza o número de seguidores do cantor
    set @cod_artista = (SELECT cod_artista
        FROM musica_artista
        WHERE cod_musica = NEW.cod_musica);
    UPDATE artista
    SET nro_seguidores = ROUND(@avg_rating * 200) -- Multiplicado por 200 apenas para um exemplo
    WHERE cod_artista = @cod_artista;
END;
$
DELIMITER ; 
select * from artista; 
select  @avg_rating;
SELECT avg (ma.cod_musica) 
    FROM hist_avaliacao ha, musica_artista ma
    WHERE ha.cod_musica = ma.cod_musica AND ma.cod_artista=1;
    UPDATE artista
    SET nro_seguidores = 3*200 
    WHERE cod_artista = 1;
select * from hist_avaliacao; 
-- Inserir avaliações para testar o trigger
INSERT INTO hist_avaliacao (cod_usuario, cod_hist_aval,cod_musica, data_avaliacao, nota, horario_avaliacao)
VALUES
  (3, 17, 3, '2023-01-03', 5, '16:45:00');

     SELECT avg (ma.cod_musica) INTO @avg_rating
    FROM hist_avaliacao ha, musica_artista ma
    WHERE ha.cod_musica = ma.cod_musica AND ma.cod_artista
IN (SELECT cod_artista FROM musica_artista WHERE cod_musica= 3 )

-- #2) Função
 -- Função para classificar músicas com base na média das avaliações
DELIMITER $

-- Função
CREATE FUNCTION ClassificarMusica(cod_musica_param INT) RETURNS VARCHAR(255)
BEGIN
    DECLARE media_avaliacao FLOAT;

    -- Calcular a média das avaliações para a música
    SELECT AVG(nota) INTO media_avaliacao
    FROM hist_avaliacao
    WHERE cod_musica = cod_musica_param;

    -- Lógica de classificação, você pode ajustar conforme necessário
    IF media_avaliacao >= 4.5 THEN
        RETURN 'Excelente';
    ELSEIF media_avaliacao >= 3.5 THEN
        RETURN 'Bom';
    ELSEIF media_avaliacao >= 2.5 THEN
        RETURN 'Regular';
    ELSE
        RETURN 'Ruim';
    END IF;
END $

DELIMITER ;

-- Exemplo de uso da função para classificar a música com cod_musica = 1
SELECT titulo, ClassificarMusica(cod_musica) FROM musica;
